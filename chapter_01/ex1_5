; Ben Bitdiddle has invented a test to determine whether the interpreter he is face with 
; is using applicative-order evaluation or normal-order evaluation. He defines the 
; following two procedures

(define (p) (p))
(define (test x y)
  (if (= x 0) 0 y))

(test 0 (p))

; What behavior will Ben observe with an interpreter that uses applicative-order evaluation? 
; What behavior will he observe with an interpreter that uses normal-order evaluation? 
; Explain your answer. (Assume that the evaluation rule for the special form if is the same 
; whether the interpreter is using normal or applicative order: 
; predicate expression is evaluated first, and the result determines whether to evaluate 
; the consequent or the alternative expression.)

Answer:
Applicative-order (tries to evaluate args first then apply)
The first procedure causes an infinite loop because it tries to evaluate itself over and over
when invoked in (test 0 (p))

Normal Order (subsititues everything until all primitives, then applies)
It will return 0, since 0 is equal to 0
